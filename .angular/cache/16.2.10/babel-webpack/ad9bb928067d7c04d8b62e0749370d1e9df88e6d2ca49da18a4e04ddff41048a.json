{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { FBMLAttribute, FBMLComponent, FBMLInstanceMethod } from '../fbml-component';\nimport * as i0 from \"@angular/core\";\n/**\n * @name Embedded Video\n * @shortdesc Component to embed Facebook videos\n * @fbdoc https://developers.facebook.com/docs/plugins/embedded-video-player\n * @description Component to embed Facebook videos and control them.\n * @usage\n * ```html\n * <!-- basic usage -->\n * <fb-video href=\"https://www.facebook.com/facebook/videos/10153231379946729/\"></fb-video>\n *\n * <!-- event emitters -->\n * <fb-video href=\"https://www.facebook.com/facebook/videos/10153231379946729/\" (paused)=\"onVideoPaused($event)\"></fb-video>\n * ```\n *\n * To manually interact with the video player, fetch it using `ViewChild`.\n *\n * ```ts\n * import { Component, ViewChild } from '@angular/core';\n * import { FBVideoComponent } from 'ngx-facebook-sdk';\n *\n * @Component(...)\n * export class MyComponent {\n *\n *   @ViewChild(FBVideoComponent) video: FBVideoComponent;\n *\n *   ngAfterViewInit() {\n *     this.video.play();\n *     this.video.pause();\n *     this.video.getVolume();\n *   }\n *\n * }\n *\n * ```\n */\nexport class FBVideoComponent extends FBMLComponent {\n  constructor(el, rnd) {\n    super(el, rnd, 'fb-video');\n    /**\n     * Fired when video starts to play.\n     */\n    this.startedPlaying = new EventEmitter();\n    /**\n     * Fired when video pauses.\n     */\n    this.paused = new EventEmitter();\n    /**\n     *\n     Fired when video finishes playing.\n     */\n    this.finishedPlaying = new EventEmitter();\n    /**\n     * Fired when video starts to buffer.\n     */\n    this.startedBuffering = new EventEmitter();\n    /**\n     * Fired when video recovers from buffering.\n     */\n    this.finishedBuffering = new EventEmitter();\n    /**\n     * Fired when an error occurs on the video.\n     */\n    this.error = new EventEmitter();\n    this._listeners = [];\n    this.nativeElement.id = this._id = 'video-' + String(Math.floor(Math.random() * 10000 + 1));\n  }\n  /**\n   * @hidden\n   */\n  ngOnInit() {\n    FB.Event.subscribe('xfbml.ready', msg => {\n      if (msg.type === 'video' && msg.id === this._id) {\n        this._instance = msg.instance;\n        this._listeners.push(this._instance.subscribe('startedPlaying', e => this.startedPlaying.emit(e)), this._instance.subscribe('paused', e => this.paused.emit(e)), this._instance.subscribe('finishedPlaying', e => this.finishedPlaying.emit(e)), this._instance.subscribe('startedBuffering', e => this.startedBuffering.emit(e)), this._instance.subscribe('finishedBuffering', e => this.finishedBuffering.emit(e)), this._instance.subscribe('error', e => this.error.emit(e)));\n      }\n    });\n  }\n  /**\n   * @hidden\n   */\n  ngOnDestroy() {\n    this._listeners.forEach(l => {\n      if (typeof l.release === 'function') {\n        l.release();\n      }\n    });\n  }\n  /**\n   * Plays the video.\n   */\n  play() {}\n  /**\n   * Pauses the video.\n   */\n  pause() {}\n  /**\n   * Seeks to specified position.\n   * @param seconds {number}\n   */\n  seek(seconds) {}\n  /**\n   * Mute the video.\n   */\n  mute() {}\n  /**\n   * Unmute the video.\n   */\n  unmute() {}\n  /**\n   * Returns true if video is muted, false if not.\n   */\n  isMuted() {\n    return;\n  }\n  /**\n   * Set the volume\n   * @param volume\n   */\n  setVolume(volume) {}\n  /**\n   * Get the volume\n   */\n  getVolume() {\n    return;\n  }\n  /**\n   * Returns the current video time position in seconds\n   */\n  getCurrentPosition() {}\n  /**\n   * Returns the video duration in seconds\n   */\n  getDuration() {}\n  static #_ = this.ɵfac = function FBVideoComponent_Factory(t) {\n    return new (t || FBVideoComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FBVideoComponent,\n    selectors: [[\"fb-video\"]],\n    inputs: {\n      href: \"href\",\n      allowfullscreen: \"allowfullscreen\",\n      autoplay: \"autoplay\",\n      width: \"width\",\n      showText: \"showText\",\n      showCaptions: \"showCaptions\"\n    },\n    outputs: {\n      startedPlaying: \"startedPlaying\",\n      paused: \"paused\",\n      finishedPlaying: \"finishedPlaying\",\n      startedBuffering: \"startedBuffering\",\n      finishedBuffering: \"finishedBuffering\",\n      error: \"error\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function FBVideoComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n}\n__decorate([FBMLAttribute], FBVideoComponent.prototype, \"href\", void 0);\n__decorate([FBMLAttribute], FBVideoComponent.prototype, \"allowfullscreen\", void 0);\n__decorate([FBMLAttribute], FBVideoComponent.prototype, \"autoplay\", void 0);\n__decorate([FBMLAttribute], FBVideoComponent.prototype, \"width\", void 0);\n__decorate([FBMLAttribute], FBVideoComponent.prototype, \"showText\", void 0);\n__decorate([FBMLAttribute], FBVideoComponent.prototype, \"showCaptions\", void 0);\n__decorate([FBMLInstanceMethod], FBVideoComponent.prototype, \"play\", null);\n__decorate([FBMLInstanceMethod], FBVideoComponent.prototype, \"pause\", null);\n__decorate([FBMLInstanceMethod], FBVideoComponent.prototype, \"seek\", null);\n__decorate([FBMLInstanceMethod], FBVideoComponent.prototype, \"mute\", null);\n__decorate([FBMLInstanceMethod], FBVideoComponent.prototype, \"unmute\", null);\n__decorate([FBMLInstanceMethod], FBVideoComponent.prototype, \"isMuted\", null);\n__decorate([FBMLInstanceMethod], FBVideoComponent.prototype, \"setVolume\", null);\n__decorate([FBMLInstanceMethod], FBVideoComponent.prototype, \"getVolume\", null);\n__decorate([FBMLInstanceMethod], FBVideoComponent.prototype, \"getCurrentPosition\", null);\n__decorate([FBMLInstanceMethod], FBVideoComponent.prototype, \"getDuration\", null);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}